type Query {
  getUserData: User
  getStatistics: UserStatistics!
}

type Mutation {
  updateUserData(newUserData:NewUserDataInput!):User!
  resetUserRecords:String!
  changeMealPlan(newPlan:[ChangedMealInput!]):User!
}

input NewUserDataInput {
name: String!
stringValue: String
floatValue: Float
booleanValue: Boolean
}

input ChangedMealInput {
  _id:String
  mealName:String!
  mealSize:String!
  startTime:String!
  endTime:String!
}

type UserStatistics {
  records: Records!
  streak: Int!
  stressAvg: Float!
  chart: Charts!
}

type Records {
  meal:Int!
  stress:Int!
}

type Charts {
  commit: [MealCommit!]
  line: MealLine
}

type MealCommit {
  date: String!
  count: Int!
}

type MealLine {
  labels: [String!]
  counts: [Int!]
}