type Query {
  getUser(id: ID!): User
}

type Mutation {
  signUp(authData:SignUpInput!): User!
  signIn(authData: SignInInput!): User!
  appleSignUp(token: String!): User!
  appleSignIn(token: String!): User!

  onboard(onboardData:OnboardData!): User!
}

type User {
  _id:String!
  email: String!
  password: String!
  token: String
  onboarded: Boolean!
  language: String!

  username:String
  firstName:String
  lastName:String
  gender:String
  bornDate:String
  body: BodyInfo
  eatHabitGoal:String
  plan:[PlannedMeal!]
  shopping: ShoppingListSettings

  streak: Int

  notifications: Notifications
}

type Notifications {
  plannerMealTime:Boolean,
  logMealTime: Boolean,
  listCreationTime: Boolean,
  shoppingTime: Boolean,
  logStressTime: Boolean
}

type BodyInfo {
  height: Float!
  weight: Float!
}

type ShoppingListSettings {
  prepDays: [Int!]
  prepStartTime: String,
  prepEndTime: String,
  shopDays: [Int!]
  shopStartTime: String,
  shopEndTime: String,
}

type PlannedMeal {
  _id:String!
  mealName:String!
  mealSize:String!
  startTime:String!
  endTime:String!
}

input SignUpInput {
 email: String!
 password:String!
 passwordConfirm:String!
}

input SignInInput {
  email: String!
  password: String!
}

input OnboardData {
  email:String!
  firstName:String!
  lastName:String!
  username:String!
  gender:String!
  bornDate:String!
  body: BodyDataInput!
  eatHabitGoal:String!
  plan: [PlannedMealInput!]
  stress: StressRecordDataInput
}

input BodyDataInput {
  height: Float
  weight: Float
}

input PlannedMealInput {
  mealName:String!
  mealSize:String!
  startTime:String!
  endTime:String!
}

