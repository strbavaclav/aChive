input BodyDataInput {
  height: Float
  weight: Float
}

type BodyInfo {
  height: Float!
  weight: Float!
}

input ChangedMealInput {
  _id: String
  endTime: String!
  mealName: String!
  mealSize: String!
  startTime: String!
}

type Charts {
  commit: [MealCommit!]
  line: MealLine
}

input InputMealRecord {
  cooked: Boolean!
  description: String
  extraMealName: String
  loggedDateTime: String!
  mealId: String
  size: String!
}

type LanguageType {
  content: String!
  description: String!
  name: String!
}

type MealCommit {
  count: Int!
  date: String!
}

type MealLine {
  counts: [Int!]
  labels: [String!]
}

type MealRecord {
  _id: String!
  cooked: Boolean!
  description: String
  extraMealName: String
  loggedDateTime: String!
  mealId: String
  size: String!
}

type MealRecordData {
  records: [MealRecord!]!
  userId: String!
}

type Mutation {
  _empty(nothing: String): String
  addMealRecord(mealRecord: InputMealRecord!, userId: String!): MealRecordData
  addStressRecord(stressRecordData: StressRecordDataInput!): StressRecords!
  appleSignIn(token: String!): User!
  appleSignUp(token: String!): User!
  changeMealPlan(newPlan: [ChangedMealInput!]): User!
  deleteStressRecord(date: String!): String!
  editStressRecord(date: String!, updatedRecord: StressRecordDataInput!): StressRecordData
  onboard(onboardData: OnboardData!): User!
  removeMealRecordById(recordId: String!, userId: String!): String!
  resetUserRecords: String!
  setShoppingListSettings(ShopListSettings: ShopListSettingsInput!): User!
  signIn(authData: SignInInput!): User!
  signUp(authData: SignUpInput!): User!
  syncShoppingList(items: [ShoppingListItemInput!]): String!
  updateMealRecordById(recordId: String!, updatedRecord: InputMealRecord!, userId: String!): MealRecordData
  updateUserData(newUserData: NewUserDataInput!): User!
}

input NewUserDataInput {
  booleanValue: Boolean
  floatValue: Float
  name: String!
  stringValue: String
}

type Notifications {
  listCreationTime: Boolean
  logMealTime: Boolean
  logStressTime: Boolean
  plannerMealTime: Boolean
  shoppingTime: Boolean
}

input OnboardData {
  body: BodyDataInput!
  bornDate: String!
  eatHabitGoal: String!
  email: String!
  firstName: String!
  gender: String!
  lastName: String!
  plan: [PlannedMealInput!]
  stress: StressRecordDataInput
  username: String!
}

type PlannedMeal {
  _id: String!
  endTime: String!
  mealName: String!
  mealSize: String!
  startTime: String!
}

input PlannedMealInput {
  endTime: String!
  mealName: String!
  mealSize: String!
  startTime: String!
}

type Query {
  _empty: String
  getMealRecordsByDate(date: String!, userId: String!): [MealRecord]
  getShoppingList: ShoppingList
  getStatistics: UserStatistics!
  getStressRecordsByDate(date: String!): dateStressRecord
  getTips: [TipItem!]
  getUser(id: ID!): User
  getUserData: User
}

type Records {
  meal: Int!
  stress: Int!
}

input ShopListSettingsInput {
  prepDays: [Int!]
  prepEndTime: String!
  prepStartTime: String!
  shopDays: [Int!]
  shopEndTime: String!
  shopStartTime: String!
}

type ShoppingList {
  items: [ShoppingListItem!]
  userId: String!
}

type ShoppingListItem {
  _id: String!
  checked: Boolean!
  itemName: String!
  quantity: Float!
  unit: String!
}

input ShoppingListItemInput {
  _id: String!
  checked: Boolean
  itemName: String!
  quantity: Float!
  unit: String!
}

type ShoppingListSettings {
  prepDays: [Int!]
  prepEndTime: String
  prepStartTime: String
  shopDays: [Int!]
  shopEndTime: String
  shopStartTime: String
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
  passwordConfirm: String!
}

type StressRecordData {
  note: String
  timestamp: String!
  value: Int!
}

input StressRecordDataInput {
  note: String
  timestamp: String!
  value: Int!
}

type StressRecords {
  stressRecords: [StressRecordData!]
}

type TipItem {
  cs: LanguageType!
  date: String!
  en: LanguageType!
  id: String!
}

type User {
  _id: String!
  body: BodyInfo
  bornDate: String
  eatHabitGoal: String
  email: String!
  firstName: String
  gender: String
  language: String!
  lastName: String
  notifications: Notifications
  onboarded: Boolean!
  password: String!
  plan: [PlannedMeal!]
  shopping: ShoppingListSettings
  streak: Int
  token: String
  username: String
}

type UserStatistics {
  chart: Charts!
  records: Records!
  streak: Int!
  stressAvg: Float!
}

type dateStressRecord {
  record: StressRecordData
}